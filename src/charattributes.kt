@JvmInline
value class CharAttribute(val bits:Int)
{
	val isAlpha get () = ALPHABIT in bits
	val isAlNum get () = ALNUM in bits
	val isDigit get () = DIGITBIT in bits
	val isSpace get () = SPACEBIT in bits
	val isPrintable get () = PRINTBIT in bits
	val isHexDigit  get () = XDIGITBIT in bits

	companion object
	{
		private var bp = 0
		private fun flag () = 1 shl (bp++)

		private operator fun Int.contains (bit:Int)
			= (this and bit) != 0

		internal val ALPHABIT = flag()
		internal val DIGITBIT = flag()
		internal val PRINTBIT = flag()
		internal val SPACEBIT = flag()
		internal val XDIGITBIT = flag()
		internal val ALNUM = ALPHABIT or DIGITBIT

		val Non = CharAttribute(0)

		operator fun invoke (ch:Char?) = ch?.let { TABLE.getOrNull(ch.code) } ?: Non
	}
}

//* accept (U)ni(C)ode (ID)entifiers?
const val LUA_UCID = 0
val NONASCI = when (LUA_UCID) {
	// consider all non-ascii codepoints to be alphabetic
	1 -> 0b00001

	// default
	else -> 0b00000
}

val TABLE = intArrayOf(
	// 00
	0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000,
	0b00000, 0b01000, 0b01000, 0b01000, 0b01000, 0b01000, 0b00000, 0b00000,
	// 10
	0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000,
	0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000,
	// 20
	0b01100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100,
	0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100,
	// 30
	0b10110, 0b10110, 0b10110, 0b10110, 0b10110, 0b10110, 0b10110, 0b10110,
	0b10110, 0b10110, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100,
	// 40
	0b00100, 0b10101, 0b10101, 0b10101, 0b10101, 0b10101, 0b10101, 0b00101,
	0b00101, 0b00101, 0b00101, 0b00101, 0b00101, 0b00101, 0b00101, 0b00101,
	// 50
	0b00101, 0b00101, 0b00101, 0b00101, 0b00101, 0b00101, 0b00101, 0b00101,
	0b00101, 0b00101, 0b00101, 0b00100, 0b00100, 0b00100, 0b00100, 0b00101,
	// 60
	0b00100, 0b10101, 0b10101, 0b10101, 0b10101, 0b10101, 0b10101, 0b00101,
	0b00101, 0b00101, 0b00101, 0b00101, 0b00101, 0b00101, 0b00101, 0b00101,
	// 70
	0b00101, 0b00101, 0b00101, 0b00101, 0b00101, 0b00101, 0b00101, 0b00101,
	0b00101, 0b00101, 0b00101, 0b00100, 0b00100, 0b00100, 0b00100, 0b00000,
	// 80
	NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI,
	NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI,
	// 90
	NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI,
	NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI,
	// a0
	NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI,
	NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI,
	// b0
	NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI,
	NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI,
	// c0
	0b00000, 0b00000, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI,
	NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI,
	// d0
	NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI,
	NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI,
	// e0
	NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI,
	NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, NONASCI,
	// f0
	NONASCI, NONASCI, NONASCI, NONASCI, NONASCI, 0b00000, 0b00000, 0b00000,
	0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000,
).map(::CharAttribute)

